<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on tuket</title>
    <link>https://tuket.github.io/</link>
    <description>Recent content in Home on tuket</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tuket.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ImGui gamma correction in OpenGL and Vulkan</title>
      <link>https://tuket.github.io/posts/2022-11-24-imgui-gamma/</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2022-11-24-imgui-gamma/</guid>
      <description>I had been using ImGui with OpenGL for a long time. Never encountered any problem with gamma corection.
Recently, I have started using ImGui wih Vulkan and noticed that the colors looked brighter. I immediately suspected it was a gamma issue.
Googling how to solve my problem, I found lots of people with similar experiences(1, 2, 3).
SKIP BLAHBLAH AND GO TO THE GOOD SOLUTION
Dumb solution One of the solutions people suggested is to create the swapchain images in linear RGB, instead of sRGB.</description>
    </item>
    
    <item>
      <title>Lightnings!</title>
      <link>https://tuket.github.io/posts/2022-10-12-lightnings/</link>
      <pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2022-10-12-lightnings/</guid>
      <description>I have made a weapon in Evil Robots that casts lightnings to nearby enemies.
In this post I wanted to show you how I approached it.
I made a demo that you can find in github.
Eventhough my game uses OpenGL, for this demo I have used the sokol library. I chose to use this library because it&amp;rsquo;s a very simple and easy to use library, and it can be compiled to most platforms (including web).</description>
    </item>
    
    <item>
      <title>Vulkan Concepts</title>
      <link>https://tuket.github.io/notes/graphics/vulkan_concepts/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/vulkan_concepts/</guid>
      <description>Host &amp;amp; Device Host refers to the CPU.
Device refers to the GPU.
In Vulkan, the host send commands to be executed by the device. The execution is asynchronous, so you need to be careful and use the explicit synchronization mechanisms that Vulkan provides.
Vulkan instance Out first interaction with the Vulkan API is creating an instance (VkCreateInstance).
The Vulkan instance stores the Vulkan state for our application.
Some interesting info you can provide when creating an instance:</description>
    </item>
    
    <item>
      <title>Explosion Decals</title>
      <link>https://tuket.github.io/posts/2022-08-05-explosion-decals/</link>
      <pubDate>Fri, 05 Aug 2022 21:15:50 +0200</pubDate>
      
      <guid>https://tuket.github.io/posts/2022-08-05-explosion-decals/</guid>
      <description>I&amp;rsquo;m going to explain a technique that I implemented for the explosion decals of my game.
Demo available in this github repo.
Many games have the need to splat textures on to surfaces dynamically. For example, we might have a floor and we would like to splat some blood onto it when a character has been hurt.
Image from https://www.gamemodd.com/cs/sprites/blooddecals/3926-fear-blood.htmlThe common approach for implementing these so called decals is to project a quad along a direction.</description>
    </item>
    
    <item>
      <title>Vulkan cheatsheet</title>
      <link>https://tuket.github.io/notes/graphics/vulkan_cheatsheet/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/vulkan_cheatsheet/</guid>
      <description>Enumerating layers constexpr u32 MAX_LAYERS = 32; VkLayerProperties layersProps[MAX_LAYERS]; u32 numLayers = MAX_LAYERS; vkEnumerateInstanceLayerProperties(&amp;amp;numLayers, layersProps); printf(&amp;#34;Available Layers\n&amp;#34;); for(u32 i = 0; i &amp;lt; numLayers; i++) { printf(&amp;#34;%s: %s\n&amp;#34;, layersProps[i].layerName, layersProps[i].description); } Create a Vulkan instance VkApplicationInfo appInfo = {}; appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO; appInfo.pApplicationName = &amp;#34;example&amp;#34;; appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.pEngineName = &amp;#34;none&amp;#34;; appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.apiVersion = VK_API_VERSION_1_0; VkInstanceCreateInfo instanceCreateInfo = {}; instanceCreateInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO; instanceCreateInfo.pApplicationInfo = &amp;amp;appInfo; instanceCreateInfo.</description>
    </item>
    
    <item>
      <title>Full-screen quad: easy and efficient trick</title>
      <link>https://tuket.github.io/notes/graphics/fs_quad_trick/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/fs_quad_trick/</guid>
      <description>The usual way would be to create a VBO with the geometry of a quad (2 triangles).
However, there is a better way of doing it.
Draw a single triangle that covers the whole screen (the triangle will extend outside of the screen). Don&amp;rsquo;t use a VBO. Instead, use the vertex id (gl_VertexID) to figure out the position and texture coordinates. The reason this is faster, is not because it&amp;rsquo;s drawing less triangles.</description>
    </item>
    
    <item>
      <title>ELF64 hello world</title>
      <link>https://tuket.github.io/notes/asm/elf64_hello_world/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/asm/elf64_hello_world/</guid>
      <description>I like to understand how things work under the hood. Assembly programming is very close to the metal but, even then, the assembler hides some complexity to make our lives easier. Also the linker does lots of work I don&amp;rsquo;t completely understand.
So I though I would make an executable by hand, where every bit in it is understood. The resulting ELF64 executable is very small (160 bytes) compared with the executables generated by C compilers and even assemblers.</description>
    </item>
    
    <item>
      <title>GDB commands for Assembly</title>
      <link>https://tuket.github.io/notes/asm/gdb_asm/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/asm/gdb_asm/</guid>
      <description>Start up:
gdb exe Change the assembler syntax from AT&amp;amp;T to Intel:
set disassembly-flavor intel If you want to make this setting permanent, paste that into ~/gdbinit.
You can verify which assembly syntax is active with:
show disassembly-flavor Enter TUI mode:
Ctrl+X, Ctrl+A Switch to assembly mode:
layout asm Run the program and break in the first like of work (b main and b _start don&amp;rsquo;t work):
starti Execute till next instruction:</description>
    </item>
    
    <item>
      <title>Hello world in Linux</title>
      <link>https://tuket.github.io/notes/asm/hello_world_linux/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/asm/hello_world_linux/</guid>
      <description>This is a minimal hello world program in Linux. It doesn&amp;rsquo;t need to link any external libraries.
SECTION .text global _start ; &amp;#34;global&amp;#34; means that the symbol can be accessed in other modules. In order to refer to a global symbol from another module, you must use the &amp;#34;extern&amp;#34; keyboard _start: mov eax, 4 ; syscall: write mov ebx, 1 ; stdout mov ecx, msg mov edx, msgLen syscall mov eax, 1 ; syscal: exit mov ebx, 0 ; return code syscall msg: db &amp;#34;hello&amp;#34;,10 msgLen: equ $ - msg ; the $ sign means the current byte address.</description>
    </item>
    
    <item>
      <title>Print the contents of a file in Linux</title>
      <link>https://tuket.github.io/notes/asm/print_file_linux/</link>
      <pubDate>Sat, 23 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/asm/print_file_linux/</guid>
      <description>; nasm -f elf64 pf.asm &amp;amp;&amp;amp; ld -nostartfiles pf.o -o pf SECTION .text global _start _start: mov rax, 2 ; syscall: open mov rdi, str_testFile mov rsi, 0 ; flags syscall mov rdi, rax ; the file descriptor mov rsi, buffer mov rdx, 128 mov rax, 0; syscall: read syscall mov rdi, 1 ; stdout mov rsi, buffer mov rdx, rax ; the size returned by read mov rax, 1; syscall: write syscall mov rax, 60 ; syscal: exit mov rdi, 0 ; return code syscall str_testFile: db &amp;#34;test.</description>
    </item>
    
    <item>
      <title>Circle vs Ray intersection</title>
      <link>https://tuket.github.io/posts/2020-07-09-circle-vs-ray-intersection/</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2020-07-09-circle-vs-ray-intersection/</guid>
      <description>A simple way to compute the intersection of a ray vs a circle.
Code snippet:
bool rayVsCircle(float&amp;amp; depth, glm::vec2 rayOrig, glm::vec2 rayDir, glm::vec2 circlePos, float circleRad) { const float R = circleRad; const glm::vec2 op = circlePos - rayOrig; if(dot(op, op) &amp;lt; R*R) { // is rayOrigin inside the circle ? depth = 0; return true; } const float D = dot(rayDir, op); const float H2 = dot(op, op) - D*D; const float K2 = R*R - H2; if(K2 &amp;gt;= 0) { depth = D - sqrt(K2); if(depth &amp;gt; 0) return true; } return false; } Demo here: https://github.</description>
    </item>
    
    <item>
      <title>Generate icosphere mesh fast</title>
      <link>https://tuket.github.io/posts/2020-06-10-generate-icosphere-mesh-fast/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2020-06-10-generate-icosphere-mesh-fast/</guid>
      <description>If you seach in the Internet for algorithms to generate icosphere meshes, most algorithms out there take an icosahedron and keep tessellating the triangular faces recursivelly (link).
I have made an algorithm that outputs the result, in a couple of flat arrays(vertices and indices), in a single pass, so it&amp;rsquo;s faster and very cache friendly. It also has the advantage that you can query the exact memory you need to allocate.</description>
    </item>
    
    <item>
      <title>Compute triangle area from three 2D points (fast way)</title>
      <link>https://tuket.github.io/posts/2020-02-14-compute-triangle-area-from-three-2d-points/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2020-02-14-compute-triangle-area-from-three-2d-points/</guid>
      <description>TLDR: code is at the end.
It&amp;rsquo;s well know that we can compute the area of a triangle as the base times the height divided by two.
$$ A = 0.5 \cdot b \cdot h $$
But how do we compute the area given the coordinates of the points?
One efficient way is using the dot product.
We make the vectors $\vec{v_1}$ and $\vec{v_2}$ by linking one point to the other two.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; virtual inheritance diagrams and links</title>
      <link>https://tuket.github.io/posts/2019-05-12-c-virtual-inheritance-diagrams-and-links/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2019-05-12-c-virtual-inheritance-diagrams-and-links/</guid>
      <description>These is a cheatsheet of the memory layout of some common pattens in virtual inheritance.
For each case there is first the code.
Then there is a diagram.
On the left there is a representation of the inheritance relationships. Gold color means virtual.
On the right there is the memory layout.
The dashed arrows represent where a pointer of that type would point if a casting was performed.
At the bottom of this page there is a collection of links.</description>
    </item>
    
    <item>
      <title>Nifty hidden shapes in a Codejam problem</title>
      <link>https://tuket.github.io/posts/2018-10-13-nifty-hiddent-shapes-in-a-codejam-problem/</link>
      <pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2018-10-13-nifty-hiddent-shapes-in-a-codejam-problem/</guid>
      <description>I was trying to solve a problem called How Big Are the Pockets? from Codejam.
Basically they want you to count the number of shaded squares in a figure like follows. They give you as input a sequence of movements (right, left, or forward):
9 F 6 R 1 F 4 RFF 2 LFF 1 LFFFR 1 F 2 R 1 F 5 In order to debug my solution I made a program that draws the line path and a trace of my solution.</description>
    </item>
    
    <item>
      <title>Sending emails with C&#43;&#43; and GMail</title>
      <link>https://tuket.github.io/posts/2018-09-03-send-gmail-cpp/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2018-09-03-send-gmail-cpp/</guid>
      <description>In this post I&amp;rsquo;m going to show how to send emails using C++ and a GMail account.
For networking I&amp;rsquo;m going to be using Asio (non-boost verion).
If you just want to see the code, here it is: github.com/tuket/send_gmail.
SSL You cannot simply connect to GMail through a regular socket. You will have to use SSL to stablish a secure connection. In Asio you will have to create an ssl::context:</description>
    </item>
    
    <item>
      <title>Markdown Guide (modified)</title>
      <link>https://tuket.github.io/post/2018-08-30-markdown-guide/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/post/2018-08-30-markdown-guide/</guid>
      <description>An h1 header Paragraphs are separated by a blank line.
2nd paragraph. Italic, bold, and monospace. Itemized lists look like:
this one that one the other one Note that &amp;mdash; not considering the asterisk &amp;mdash; the actual text content starts at 4-columns in.
Block quotes are written like so.
They can span multiple paragraphs, if you like.
Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., &amp;ldquo;it&amp;rsquo;s all in chapters 12&amp;ndash;14&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>Sorting multiple vectors in the same way using C&#43;&#43; variadic templates</title>
      <link>https://tuket.github.io/posts/2017-09-30-sorting-multiple-vectors-in-the-same-way-using-c-variadic-templates/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2017-09-30-sorting-multiple-vectors-in-the-same-way-using-c-variadic-templates/</guid>
      <description>Let&amp;rsquo;s imagine we have a table like shown below. In this simple example we have information about people organized in rows.
Id Name Surname Age 1 Tuket Troco 24 0 Rufol Conino 11 2 Muscul Man 20 3 Jigoro Kano 78 And we represent this table using C++ std::vectors:
using namespace std; ... vector&amp;lt;int&amp;gt; id = {1, 0, 2, 3}; vector&amp;lt;string&amp;gt; name = {&amp;#34;Tuket&amp;#34;, &amp;#34;Rufol&amp;#34;, &amp;#34;Muscul&amp;#34;, &amp;#34;Jigoro&amp;#34;}; vector&amp;lt;string&amp;gt; surname = {&amp;#34;Troco&amp;#34;, &amp;#34;Conino&amp;#34;, &amp;#34;Man&amp;#34;, &amp;#34;Kano&amp;#34;}; vector&amp;lt;unsigned&amp;gt; age = {24, 11, 20, 78}; We want to be able to sort these rows by different criterias.</description>
    </item>
    
    <item>
      <title>BRDF based importance sampling for microfacets cheatsheet</title>
      <link>https://tuket.github.io/posts/2017-07-09-brdf-based-importance-sampling/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2017-07-09-brdf-based-importance-sampling/</guid>
      <description>BRDF based importance sampling aims to reduce the cost of computing the rendering equation by taking into account the BRDF itself. In this case we are going to use the normal distribution function NDF1.
First let&amp;rsquo;s review the rendering equation (simplified version)
$$ L_o(\vec{\omega} _ o)= L_e(\vec{\omega} _ o) + \int _\Omega {f_r(\vec{\omega} _i, \vec{\omega} _o) \ L_i(\vec{\omega} _i}) \ (\vec{\omega}_i \cdot \vec{n}) \ d\vec{\omega} _i $$
$\vec{\omega}_i$: incoming directions.</description>
    </item>
    
    <item>
      <title>The Curse of Magin</title>
      <link>https://tuket.github.io/posts/2017-07-09-the-curse-of-magin/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2017-07-09-the-curse-of-magin/</guid>
      <description>We developed a game for a school subject called the curse of Magin. It has been a great experience and very useful for learning.
Check it out at thecurseofmagin.itch.io/the-curse-of-magin.</description>
    </item>
    
    <item>
      <title>Create a simple BRDF plotter with Untity</title>
      <link>https://tuket.github.io/posts/2017-05-13-unity-brdf-plotter/</link>
      <pubDate>Sat, 13 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2017-05-13-unity-brdf-plotter/</guid>
      <description>I needed a tool to plot analytical BRDFs. I was surprised I wasn&amp;rsquo;t able to find anything that could fit my requirements(shame on me: check out the one from Disney). So I created my own interactive BRDF plotter using Unity. It&amp;rsquo;s pretty easy to create your own BRDF plotter (if you don&amp;rsquo;t have big expectations on it). The goal is to make something useful in a couple hours.
Displacing vertices of a sphere What we are going to do is super easy.</description>
    </item>
    
    <item>
      <title>Hacker with Bullhorn</title>
      <link>https://tuket.github.io/post/hacker-with-horn/</link>
      <pubDate>Mon, 23 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/post/hacker-with-horn/</guid>
      <description>Hacker with bullhorn: &amp;ldquo;Save your money! Accept one of our free tanks! It is invulnerable, and can drive across rocks and swamps at ninety miles an hour while getting a hundred miles to the gallon!&amp;rdquo;
Prospective station wagon buyer: &amp;ldquo;I know what you say is true&amp;hellip;but&amp;hellip;er&amp;hellip;I don&amp;rsquo;t know how to maintain a tank!&amp;rdquo;
Bullhorn: &amp;ldquo;You don&amp;rsquo;t know how to maintain a station wagon either!&amp;rdquo;
Buyer: &amp;ldquo;But this dealership has mechanics on staff.</description>
    </item>
    
    <item>
      <title>Command Line Awesomeness</title>
      <link>https://tuket.github.io/post/2015-07-23-command-line-awesomeness/</link>
      <pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/post/2015-07-23-command-line-awesomeness/</guid>
      <description>This crud is called HTML (HyperText Markup Language) and it is basically a very simple programming language instructing your web browser how to draw a page on a screen. Anyone can learn HTML and many people do. The important thing is that no matter what splendid multimedia web pages they might represent, HTML files are just telegrams.
When Ronald Reagan was a radio announcer, he used to call baseball games by reading the terse descriptions that trickled in over the telegraph wire and were printed out on a paper tape.</description>
    </item>
    
    <item>
      <title>Juicy Code</title>
      <link>https://tuket.github.io/post/juicy-code/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/post/juicy-code/</guid>
      <description>Check out this JUICY! code:
def with_value_from_database(value) self.class.from_database(name, value, type) end def with_cast_value(value) self.class.with_cast_value(name, value, type) end def with_type(type) if changed_in_place? with_value_from_user(value).with_type(type) else self.class.new(name, value_before_type_cast, type, original_attribute) end end </description>
    </item>
    
    <item>
      <title>Notes</title>
      <link>https://tuket.github.io/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/</guid>
      <description>These are my notes on different topics
Graphics Assembly </description>
    </item>
    
    <item>
      <title>Partial custom mipmap levels in OpenGL</title>
      <link>https://tuket.github.io/notes/graphics/partial_custom_mip_levels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/partial_custom_mip_levels/</guid>
      <description>OpenGL allows to automatically create mipmaps for you with glGenMipmap.
But you can upload you own mipmaps using glTexImage2D.
for(int lvl = 0; numMips; lvl++) { glTexImage2D(GL_TEXTURE_2D, lvl, GL_RGBA8, texture[lvl].w, texture[lvl].h, 0, GL_RGBA, GL_UNSIGNED_BYTE, texture[lvl].data ); } However, I wanted to provide my own images only for the upper levels, and let OpenGL compute the rest. This is possible to do because OpenGL will generate mipmaps starting from GL_TEXTURE_BASE_LEVEL. So you can do it like this:</description>
    </item>
    
    <item>
      <title>Portfolio</title>
      <link>https://tuket.github.io/portfolio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/portfolio/</guid>
      <description>Disclaimer: many of these projects were done when I was very noob. Even if I provide download links and code, please don&amp;rsquo;t take it as reference since it is probably of very bad quality. Anyway, it might be useful for learning how not to do things and laughing (that&amp;rsquo;s what I do).
Evil Robots A complete indie game made by me.
I did all the design, programming, and art myself&amp;hellip; made me realize I suck as an artist haha.</description>
    </item>
    
    <item>
      <title>Test markdown</title>
      <link>https://tuket.github.io/posts/2015-02-20-test-markdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/posts/2015-02-20-test-markdown/</guid>
      <description>You can write regular markdown here and Jekyll will automatically convert it to a nice webpage. I strongly encourage you to take 5 minutes to learn how to write in markdown - it&amp;rsquo;ll teach you how to transform regular text into bold/italics/headings/tables/etc.
Here is some bold text
Here is a secondary heading Here&amp;rsquo;s a useless table:
Number Next number Previous number Five Six Four Ten Eleven Nine Seven Eight Six Two Three One How about a yummy crepe?</description>
    </item>
    
  </channel>
</rss>
