<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on tuket</title>
    <link>https://tuket.github.io/notes/graphics/</link>
    <description>Recent content in Graphics on tuket</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://tuket.github.io/notes/graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vulkan Concepts</title>
      <link>https://tuket.github.io/notes/graphics/vulkan_concepts/</link>
      <pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/vulkan_concepts/</guid>
      <description>Host &amp;amp; Device Host refers to the CPU.
Device refers to the GPU.
In Vulkan, the host send commands to be executed by the device. The execution is asynchronous, so you need to be careful and use the explicit synchronization mechanisms that Vulkan provides.
Vulkan instance Out first interaction with the Vulkan API is creating an instance (VkCreateInstance).
The Vulkan instance stores the Vulkan state for our application.
Some interesting info you can provide when creating an instance:</description>
    </item>
    
    <item>
      <title>Vulkan cheatsheet</title>
      <link>https://tuket.github.io/notes/graphics/vulkan_cheatsheet/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/vulkan_cheatsheet/</guid>
      <description>Enumerating layers constexpr u32 MAX_LAYERS = 32; VkLayerProperties layersProps[MAX_LAYERS]; u32 numLayers = MAX_LAYERS; vkEnumerateInstanceLayerProperties(&amp;amp;numLayers, layersProps); printf(&amp;#34;Available Layers\n&amp;#34;); for(u32 i = 0; i &amp;lt; numLayers; i++) { printf(&amp;#34;%s: %s\n&amp;#34;, layersProps[i].layerName, layersProps[i].description); } Create a Vulkan instance VkApplicationInfo appInfo = {}; appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO; appInfo.pApplicationName = &amp;#34;example&amp;#34;; appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.pEngineName = &amp;#34;none&amp;#34;; appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.apiVersion = VK_API_VERSION_1_0; VkInstanceCreateInfo instanceCreateInfo = {}; instanceCreateInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO; instanceCreateInfo.pApplicationInfo = &amp;amp;appInfo; instanceCreateInfo.</description>
    </item>
    
    <item>
      <title>Full-screen quad: easy and efficient trick</title>
      <link>https://tuket.github.io/notes/graphics/fs_quad_trick/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/fs_quad_trick/</guid>
      <description>The usual way would be to create a VBO with the geometry of a quad (2 triangles).
However, there is a better way of doing it.
Draw a single triangle that covers the whole screen (the triangle will extend outside of the screen). Don&amp;rsquo;t use a VBO. Instead, use the vertex id (gl_VertexID) to figure out the position and texture coordinates. The reason this is faster, is not because it&amp;rsquo;s drawing less triangles.</description>
    </item>
    
    <item>
      <title>Partial custom mipmap levels in OpenGL</title>
      <link>https://tuket.github.io/notes/graphics/partial_custom_mip_levels/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tuket.github.io/notes/graphics/partial_custom_mip_levels/</guid>
      <description>OpenGL allows to automatically create mipmaps for you with glGenMipmap.
But you can upload you own mipmaps using glTexImage2D.
for(int lvl = 0; numMips; lvl++) { glTexImage2D(GL_TEXTURE_2D, lvl, GL_RGBA8, texture[lvl].w, texture[lvl].h, 0, GL_RGBA, GL_UNSIGNED_BYTE, texture[lvl].data ); } However, I wanted to provide my own images only for the upper levels, and let OpenGL compute the rest. This is possible to do because OpenGL will generate mipmaps starting from GL_TEXTURE_BASE_LEVEL. So you can do it like this:</description>
    </item>
    
  </channel>
</rss>
